# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v1.2. To use this config, the firmware should be compiled for the
# STM32F103 with a "28KiB bootloader" and USB communication. 8mhz cryatal. Also,
# select "Enable extra low-level configuration options" and configure
# "GPIO pins to set at micro-controller startup" to "!PC13".

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

# See docs/Config_Reference.md for a description of parameters.

# Note: This board has a design flaw in its thermistor circuits that
# cause inaccurate temperatures (most noticeable at low temperatures).

# Compiling the board firmware
# cd klipper
# make menuconfig
# make clean
# make

# Compile/upgrade Raspberry Pi MCU Firmware
# cd ~/klipper/
# sudo cp ./scripts/klipper-mcu.service /etc/systemd/system/
# sudo systemctl enable klipper-mcu.service
# make menuconfig
#
# Choose micro-controller Architecture (Linux process)
# Quit and save
#
# make clean
# sudo service klipper stop
# make flash
# sudo systemctl start klipper-mcu.service
# sudo service klipper start

# Useful Information:
# Pin names may be preceded by ! to indicate that a reverse polarity should be used (eg, trigger on low instead of high).
# Input pins may be preceded by ^ to indicate that a hardware pull-up resistor should be enabled for the pin.


###################################################################################
#Controllers
###################################################################################

################################
# BTT SKR Mini E3 V1.2 Mainboard
################################

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f103xe_32FFD9055252343728762243-if00
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ.
#   This parameter must be provided when using a serial port.
baud: 115200
#   The baud rate to use. The default is 250000.
#canbus_uuid:
#   If using a device connected to a CAN bus then this sets the unique
#   chip identifier to connect to. This value must be provided when using
#   CAN bus for communication.
#canbus_interface:
#   If using a device connected to a CAN bus then this sets the CAN
#   network interface to use. The default is 'can0'.
#restart_method: command
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'cheetah', 'rpi_usb',
#   and 'command'. The 'arduino' method (toggle DTR) is common on
#   Arduino boards and clones. The 'cheetah' method is a special
#   method needed for some Fysetc Cheetah boards. The 'rpi_usb' method
#   is useful on Raspberry Pi boards with micro-controllers powered
#   over USB - it briefly disables power to all USB ports to
#   accomplish a micro-controller reset. The 'command' method involves
#   sending a Kalico command to the micro-controller so that it can
#   reset itself. The default is 'arduino' if the micro-controller
#   communicates over a serial port, 'command' otherwise.
is_non_critical: False
#   Setting this to True will allow the mcu to be disconnected and
#   reconnected at will without errors. Helpful for USB-accelerometer boards
#   and USB-probes

[static_digital_output usb_pullup_enable]
pins: !PC13
#   A comma separated list of pins to be set as GPIO output pins. The
#   pin will be set to a high level unless the pin name is prefaced
#   with "!". This parameter must be provided.

#############################
# Raspberry Pi Additional MCU
#############################
[mcu rpi]
serial: /tmp/klipper_host_mcu
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ.
#   This parameter must be provided when using a serial port.
#baud: 250000
#   The baud rate to use. The default is 250000.
#canbus_uuid:
#   If using a device connected to a CAN bus then this sets the unique
#   chip identifier to connect to. This value must be provided when using
#   CAN bus for communication.
#canbus_interface:
#   If using a device connected to a CAN bus then this sets the CAN
#   network interface to use. The default is 'can0'.
#restart_method:
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'cheetah', 'rpi_usb',
#   and 'command'. The 'arduino' method (toggle DTR) is common on
#   Arduino boards and clones. The 'cheetah' method is a special
#   method needed for some Fysetc Cheetah boards. The 'rpi_usb' method
#   is useful on Raspberry Pi boards with micro-controllers powered
#   over USB - it briefly disables power to all USB ports to
#   accomplish a micro-controller reset. The 'command' method involves
#   sending a Kalico command to the micro-controller so that it can
#   reset itself. The default is 'arduino' if the micro-controller
#   communicates over a serial port, 'command' otherwise.
is_non_critical: True
#   Setting this to True will allow the mcu to be disconnected and
#   reconnected at will without errors. Helpful for USB-accelerometer boards
#   and USB-probes

###################################################################################
# include file declarations
###################################################################################

[include mainsail.cfg]
[include shell_command.cfg]
[include KAMP_Settings.cfg]

###################################################################################
# Main Printer Attributes
###################################################################################

[printer]
kinematics: limited_cartesian
max_x_velocity: 500
#   This sets the maximum velocity (in mm/s) of movement along the x
#   axis. This setting can be used to restrict the maximum speed of
#   the x stepper motor. The default is to use max_velocity for
#   max_x_velocity.
max_y_velocity: 200
#   This sets the maximum velocity (in mm/s) of movement along the y
#   axis. This setting can be used to restrict the maximum speed of
#   the y stepper motor. The default is to use max_velocity for
#   max_x_velocity.
max_z_velocity: 15
#   See cartesian above.
max_velocity: 500
#   In order to get maximum velocity gains on diagonals, this should be equal or
#   greater than the hypotenuse (sqrt(x*x + y*y)) of max_x_velocity and
#   max_y_velocity.
max_x_accel: 3000
#   This sets the maximum acceleration (in mm/s^2) of movement along
#   the x axis. It limits the acceleration of the x stepper motor. The
#   default is to use max_accel for max_x_accel.
max_y_accel: 500
#   This sets the maximum acceleration (in mm/s^2) of movement along
#   the y axis. It limits the acceleration of the y stepper motor. The
#   default is to use max_accel for max_y_accel.
max_z_accel: 100
# See cartesian above.
max_accel: 3000
# See cartesian above.
scale_xy_accel: False
#   When true, scales the XY limits by the current tool head acceleration.
#   The factor is: slicer accel / hypot(max_x_accel, max_y_accel).
#   See below.

###################################################################################
# Motors
###################################################################################
#################################################
# Creality 42-40 Motor
# Current Rating: 1.5A
# 1.8 degree/200 steps
#################################################

[stepper_x]
step_pin: PB13
#   Step GPIO pin (triggered high). This parameter must be provided.
dir_pin:!PB12
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
enable_pin:!PB14
#   Enable pin (default is enable high; use ! to indicate enable
#   low). If this parameter is not provided then the stepper motor
#   driver must always be enabled.
rotation_distance: 40
#   Distance (in mm) that the axis travels with one full rotation of
#   the stepper motor (or final gear if gear_ratio is specified).
#   This parameter must be provided.
microsteps: 32
#   The number of microsteps the stepper motor driver uses. This
#   parameter must be provided.
full_steps_per_rotation: 200
#   The number of full steps for one rotation of the stepper motor.
#   Set this to 200 for a 1.8 degree stepper motor or set to 400 for a
#   0.9 degree motor. The default is 200.
#gear_ratio:
#   The gear ratio if the stepper motor is connected to the axis via a
#   gearbox. For example, one may specify "5:1" if a 5 to 1 gearbox is
#   in use. If the axis has multiple gearboxes one may specify a comma
#   separated list of gear ratios (for example, "57:11, 2:1"). If a
#   gear_ratio is specified then rotation_distance specifies the
#   distance the axis travels for one full rotation of the final gear.
#   The default is to not use a gear ratio.
#step_pulse_duration:
#   The minimum time between the step pulse signal edge and the
#   following "unstep" signal edge. This is also used to set the
#   minimum time between a step pulse and a direction change signal.
#   The default is 0.000000100 (100ns) for TMC steppers that are
#   configured in UART or SPI mode, and the default is 0.000002 (which
#   is 2us) for all other steppers.
endstop_pin: ^PC0
#   Endstop switch detection pin. If this endstop pin is on a
#   different mcu than the stepper motor then it enables "multi-mcu
#   homing". This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
position_min: 0
#   Minimum valid distance (in mm) the user may command the stepper to
#   move to.  The default is 0mm.
position_endstop: 0
#   Location of the endstop (in mm). This parameter must be provided
#   for the X, Y, and Z steppers on cartesian style printers.
position_max: 246  # Bed max 233mm
#   Maximum valid distance (in mm) the user may command the stepper to
#   move to. This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
homing_speed: 50.0
#   Maximum velocity (in mm/s) of the stepper when homing. The default
#   is 5mm/s.
homing_accel: 500
#   Maximum accel (in mm/s) of the stepper when homing. The default
#   is to use the max accel configured in the [printer]'s object.
homing_retract_dist: 5.0
#   Distance to backoff (in mm) before homing a second time during
#   homing. If `use_sensorless_homing` is false, this setting can be set
#   to zero to disable the second home. If `use_sensorless_homing` is
#   true, this setting can be > 0 to backoff after homing. The default
#   is 5mm.
#homing_retract_speed: 10
#   Speed to use on the retract move after homing in case this should
#   be different from the homing speed, which is the default for this
#   parameter
#min_home_dist:
#   Minimum distance (in mm) for toolhead before sensorless homing. If closer
#   than `min_home_dist` to endstop, it moves away to this distance, then homes.
#   If further, it directly homes and retracts to `homing_retract_dist`.
#   The default is equal to `homing_retract_dist`.
#second_homing_speed:
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2. If `use_sensorless_homing` is
#   true, the default is homing_speed.
#homing_positive_dir:
#   If true, homing will cause the stepper to move in a positive
#   direction (away from zero); if false, home towards zero. It is
#   better to use the default than to specify this parameter. The
#   default is true if position_endstop is near position_max and false
#   if near position_min.
#use_sensorless_homing:
#   If true, disables the second home action if homing_retract_dist > 0.
#   The default is true if endstop_pin is configured to use virtual_endstop

[tmc2209 stepper_x]
uart_pin: PB15
#tx_pin:
#select_pins:
interpolate: False
run_current: 0.550
#hold_current:
#home_current:
#current_change_dwell_time:
sense_resistor: 0.110
#stealthchop_threshold: 0
stealthchop_threshold: 999999
#   See the "tmc2208" section for the definition of these parameters.
#coolstep_threshold:
#   The velocity (in mm/s) to set the TMC driver internal "CoolStep"
#   threshold to. If set, the coolstep feature will be enabled when
#   the stepper motor velocity is near or above this value. Important
#   - if coolstep_threshold is set and "sensorless homing" is used,
#   then one must ensure that the homing speed is above the coolstep
#   threshold! The default is to not enable the coolstep feature.
#uart_address:
#   The address of the TMC2209 chip for UART messages (an integer
#   between 0 and 3). This is typically used when multiple TMC2209
#   chips are connected to the same UART pin. The default is zero.
#driver_MULTISTEP_FILT: True
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_TBL: 2
#driver_TOFF: 3
#driver_HEND: 0
#driver_HSTRT: 5
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#driver_SGTHRS: 0
#   Set the given register during the configuration of the TMC2209
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag_pin:
#   The micro-controller pin attached to the DIAG line of the TMC2209
#   chip. The pin is normally prefaced with "^" to enable a pullup.
#   Setting this creates a "tmc2209_stepper_x:virtual_endstop" virtual
#   pin which may be used as the stepper's endstop_pin. Doing this
#   enables "sensorless homing". (Be sure to also set driver_SGTHRS to
#   an appropriate sensitivity value.) The default is to not enable
#   sensorless homing.

#################################################
# Creality 42-34 Motor
# Current Rating: 1.5A
# 1.8 degree/200 steps
#################################################
[stepper_y]
step_pin: PB10
#   Step GPIO pin (triggered high). This parameter must be provided.
dir_pin:!PB2
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
enable_pin:!PB11
#   Enable pin (default is enable high; use ! to indicate enable
#   low). If this parameter is not provided then the stepper motor
#   driver must always be enabled.
rotation_distance: 40
#   Distance (in mm) that the axis travels with one full rotation of
#   the stepper motor (or final gear if gear_ratio is specified).
#   This parameter must be provided.
microsteps: 32
#   The number of microsteps the stepper motor driver uses. This
#   parameter must be provided.
full_steps_per_rotation: 200
#   The number of full steps for one rotation of the stepper motor.
#   Set this to 200 for a 1.8 degree stepper motor or set to 400 for a
#   0.9 degree motor. The default is 200.
#gear_ratio:
#   The gear ratio if the stepper motor is connected to the axis via a
#   gearbox. For example, one may specify "5:1" if a 5 to 1 gearbox is
#   in use. If the axis has multiple gearboxes one may specify a comma
#   separated list of gear ratios (for example, "57:11, 2:1"). If a
#   gear_ratio is specified then rotation_distance specifies the
#   distance the axis travels for one full rotation of the final gear.
#   The default is to not use a gear ratio.
#step_pulse_duration:
#   The minimum time between the step pulse signal edge and the
#   following "unstep" signal edge. This is also used to set the
#   minimum time between a step pulse and a direction change signal.
#   The default is 0.000000100 (100ns) for TMC steppers that are
#   configured in UART or SPI mode, and the default is 0.000002 (which
#   is 2us) for all other steppers.
endstop_pin: ^PC1
#   Endstop switch detection pin. If this endstop pin is on a
#   different mcu than the stepper motor then it enables "multi-mcu
#   homing". This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
position_min: -12
#   Minimum valid distance (in mm) the user may command the stepper to
#   move to.  The default is 0mm.
position_endstop: -12
#   Location of the endstop (in mm). This parameter must be provided
#   for the X, Y, and Z steppers on cartesian style printers.
position_max: 214
#   Maximum valid distance (in mm) the user may command the stepper to
#   move to. This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
homing_speed: 40.0
#   Maximum velocity (in mm/s) of the stepper when homing. The default
#   is 5mm/s.
homing_accel: 500
#   Maximum accel (in mm/s) of the stepper when homing. The default
#   is to use the max accel configured in the [printer]'s object.
homing_retract_dist: 5.0
#   Distance to backoff (in mm) before homing a second time during
#   homing. If `use_sensorless_homing` is false, this setting can be set
#   to zero to disable the second home. If `use_sensorless_homing` is
#   true, this setting can be > 0 to backoff after homing. The default
#   is 5mm.
#homing_retract_speed:
#   Speed to use on the retract move after homing in case this should
#   be different from the homing speed, which is the default for this
#   parameter
#min_home_dist:
#   Minimum distance (in mm) for toolhead before sensorless homing. If closer
#   than `min_home_dist` to endstop, it moves away to this distance, then homes.
#   If further, it directly homes and retracts to `homing_retract_dist`.
#   The default is equal to `homing_retract_dist`.
#second_homing_speed:
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2. If `use_sensorless_homing` is
#   true, the default is homing_speed.
#homing_positive_dir:
#   If true, homing will cause the stepper to move in a positive
#   direction (away from zero); if false, home towards zero. It is
#   better to use the default than to specify this parameter. The
#   default is true if position_endstop is near position_max and false
#   if near position_min.
#use_sensorless_homing:
#   If true, disables the second home action if homing_retract_dist > 0.
#   The default is true if endstop_pin is configured to use virtual_endstop

[tmc2209 stepper_y]
uart_pin: PC6
#tx_pin:
#select_pins:
interpolate: False
run_current: 0.640
#hold_current:
#home_current:
#current_change_dwell_time:
sense_resistor: 0.110
#stealthchop_threshold: 0
stealthchop_threshold: 999999
#   See the "tmc2208" section for the definition of these parameters.
#coolstep_threshold:
#   The velocity (in mm/s) to set the TMC driver internal "CoolStep"
#   threshold to. If set, the coolstep feature will be enabled when
#   the stepper motor velocity is near or above this value. Important
#   - if coolstep_threshold is set and "sensorless homing" is used,
#   then one must ensure that the homing speed is above the coolstep
#   threshold! The default is to not enable the coolstep feature.
#uart_address:
#   The address of the TMC2209 chip for UART messages (an integer
#   between 0 and 3). This is typically used when multiple TMC2209
#   chips are connected to the same UART pin. The default is zero.
#driver_MULTISTEP_FILT: True
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_TBL: 2
#driver_TOFF: 3
#driver_HEND: 0
#driver_HSTRT: 5
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#driver_SGTHRS: 0
#   Set the given register during the configuration of the TMC2209
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag_pin:
#   The micro-controller pin attached to the DIAG line of the TMC2209
#   chip. The pin is normally prefaced with "^" to enable a pullup.
#   Setting this creates a "tmc2209_stepper_x:virtual_endstop" virtual
#   pin which may be used as the stepper's endstop_pin. Doing this
#   enables "sensorless homing". (Be sure to also set driver_SGTHRS to
#   an appropriate sensitivity value.) The default is to not enable
#   sensorless homing.


#################################################
# Creality 42-34 Motor (Dual Motors in parallel)
# Current Rating: 1.5A
# 1.8 degree/200 steps
#################################################
[stepper_z]
step_pin: PB0
#   Step GPIO pin (triggered high). This parameter must be provided.
dir_pin: PC5
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
enable_pin:!PB1
#   Enable pin (default is enable high; use ! to indicate enable
#   low). If this parameter is not provided then the stepper motor
#   driver must always be enabled.
rotation_distance: 8
#   Distance (in mm) that the axis travels with one full rotation of
#   the stepper motor (or final gear if gear_ratio is specified).
#   This parameter must be provided.
microsteps: 32
#   The number of microsteps the stepper motor driver uses. This
#   parameter must be provided.
full_steps_per_rotation: 200
#   The number of full steps for one rotation of the stepper motor.
#   Set this to 200 for a 1.8 degree stepper motor or set to 400 for a
#   0.9 degree motor. The default is 200.
#gear_ratio:
#   The gear ratio if the stepper motor is connected to the axis via a
#   gearbox. For example, one may specify "5:1" if a 5 to 1 gearbox is
#   in use. If the axis has multiple gearboxes one may specify a comma
#   separated list of gear ratios (for example, "57:11, 2:1"). If a
#   gear_ratio is specified then rotation_distance specifies the
#   distance the axis travels for one full rotation of the final gear.
#   The default is to not use a gear ratio.
#step_pulse_duration:
#   The minimum time between the step pulse signal edge and the
#   following "unstep" signal edge. This is also used to set the
#   minimum time between a step pulse and a direction change signal.
#   The default is 0.000000100 (100ns) for TMC steppers that are
#   configured in UART or SPI mode, and the default is 0.000002 (which
#   is 2us) for all other steppers.
endstop_pin: probe:z_virtual_endstop
#   Endstop switch detection pin. If this endstop pin is on a
#   different mcu than the stepper motor then it enables "multi-mcu
#   homing". This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
position_min: -5
#   Minimum valid distance (in mm) the user may command the stepper to
#   move to.  The default is 0mm.
#position_endstop: -12
#   Location of the endstop (in mm). This parameter must be provided
#   for the X, Y, and Z steppers on cartesian style printers.
position_max: 227
#   Maximum valid distance (in mm) the user may command the stepper to
#   move to. This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
#homing_speed: 5.0
#   Maximum velocity (in mm/s) of the stepper when homing. The default
#   is 5mm/s.
#homing_accel:
#   Maximum accel (in mm/s) of the stepper when homing. The default
#   is to use the max accel configured in the [printer]'s object.
#homing_retract_dist: 5.0
#   Distance to backoff (in mm) before homing a second time during
#   homing. If `use_sensorless_homing` is false, this setting can be set
#   to zero to disable the second home. If `use_sensorless_homing` is
#   true, this setting can be > 0 to backoff after homing. The default
#   is 5mm.
#homing_retract_speed:
#   Speed to use on the retract move after homing in case this should
#   be different from the homing speed, which is the default for this
#   parameter
#min_home_dist:
#   Minimum distance (in mm) for toolhead before sensorless homing. If closer
#   than `min_home_dist` to endstop, it moves away to this distance, then homes.
#   If further, it directly homes and retracts to `homing_retract_dist`.
#   The default is equal to `homing_retract_dist`.
#second_homing_speed:
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2. If `use_sensorless_homing` is
#   true, the default is homing_speed.
#homing_positive_dir:
#   If true, homing will cause the stepper to move in a positive
#   direction (away from zero); if false, home towards zero. It is
#   better to use the default than to specify this parameter. The
#   default is true if position_endstop is near position_max and false
#   if near position_min.
#use_sensorless_homing:
#   If true, disables the second home action if homing_retract_dist > 0.
#   The default is true if endstop_pin is configured to use virtual_endstop

[tmc2209 stepper_z]
uart_pin: PC10
#tx_pin:
#select_pins:
interpolate: False
run_current: 0.640
#hold_current:
#home_current:
#current_change_dwell_time:
sense_resistor: 0.110
#stealthchop_threshold: 0
stealthchop_threshold: 999999
#   See the "tmc2208" section for the definition of these parameters.
#coolstep_threshold:
#   The velocity (in mm/s) to set the TMC driver internal "CoolStep"
#   threshold to. If set, the coolstep feature will be enabled when
#   the stepper motor velocity is near or above this value. Important
#   - if coolstep_threshold is set and "sensorless homing" is used,
#   then one must ensure that the homing speed is above the coolstep
#   threshold! The default is to not enable the coolstep feature.
#uart_address:
#   The address of the TMC2209 chip for UART messages (an integer
#   between 0 and 3). This is typically used when multiple TMC2209
#   chips are connected to the same UART pin. The default is zero.
#driver_MULTISTEP_FILT: True
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_TBL: 2
#driver_TOFF: 3
#driver_HEND: 0
#driver_HSTRT: 5
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#driver_SGTHRS: 0
#   Set the given register during the configuration of the TMC2209
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag_pin:
#   The micro-controller pin attached to the DIAG line of the TMC2209
#   chip. The pin is normally prefaced with "^" to enable a pullup.
#   Setting this creates a "tmc2209_stepper_x:virtual_endstop" virtual
#   pin which may be used as the stepper's endstop_pin. Doing this
#   enables "sensorless homing". (Be sure to also set driver_SGTHRS to
#   an appropriate sensitivity value.) The default is to not enable
#   sensorless homing.

[extruder]
step_pin: PB3
dir_pin: PB4
enable_pin: !PD2
microsteps: 16
rotation_distance: 8.279
full_steps_per_rotation: 200
#gear_ratio: 3:1
#   See the "stepper" section for a description of the above
#   parameters. If none of the above parameters are specified then no
#   stepper will be associated with the nozzle hotend (though a
#   SYNC_EXTRUDER_MOTION command may associate one at run-time).
nozzle_diameter: 0.4
#   Diameter of the nozzle orifice (in mm). This parameter must be
#   provided.
filament_diameter: 1.75
#   The nominal diameter of the raw filament (in mm) as it enters the
#   extruder. This parameter must be provided.
#max_extrude_cross_section:
#   Maximum area (in mm^2) of an extrusion cross section (eg,
#   extrusion width multiplied by layer height). This setting prevents
#   excessive amounts of extrusion during relatively small XY moves.
#   If a move requests an extrusion rate that would exceed this value
#   it will cause an error to be returned. The default is: 4.0 *
#   nozzle_diameter^2
#instantaneous_corner_velocity: 1.000
#   The maximum instantaneous velocity change (in mm/s) of the
#   extruder during the junction of two moves. The default is 1mm/s.
max_extrude_only_distance: 120.0
#   Maximum length (in mm of raw filament) that a retraction or
#   extrude-only move may have. If a retraction or extrude-only move
#   requests a distance greater than this value it will cause an error
#   to be returned. The default is 50mm.
#max_extrude_only_velocity:
#max_extrude_only_accel:
#   Maximum velocity (in mm/s) and acceleration (in mm/s^2) of the
#   extruder motor for retractions and extrude-only moves. These
#   settings do not have any impact on normal printing moves. If not
#   specified then they are calculated to match the limit an XY
#   printing move with a cross section of 4.0*nozzle_diameter^2 would
#   have.
pressure_advance: 0.0
#   The amount of raw filament to push into the extruder during
#   extruder acceleration. An equal amount of filament is retracted
#   during deceleration. It is measured in millimeters per
#   millimeter/second. The default is 0, which disables pressure
#   advance.
pressure_advance_smooth_time: 0.030
#   A time range (in seconds) to use when calculating the average
#   extruder velocity for pressure advance. A larger value results in
#   smoother extruder movements. This parameter may not exceed 200ms.
#   This setting only applies if pressure_advance is non-zero. The
#   default is 0.040 (40 milliseconds).
#
# The remaining variables describe the extruder heater.
heater_pin: PC8
#   PWM output pin controlling the heater. This parameter must be
#   provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   heater_pin may be set to. The value 1.0 allows the pin to be set
#   fully enabled for extended periods, while a value of 0.5 would
#   allow the pin to be enabled for no more than half the time. This
#   setting may be used to limit the total power output (over extended
#   periods) to the heater. The default is 1.0.
sensor_type: ATC Semitec 104NT-4-R025H42G
#   Type of sensor - common thermistors are "EPCOS 100K B57560G104F",
#   "ATC Semitec 104GT-2", "ATC Semitec 104NT-4-R025H42G", "Generic
#   3950","Honeywell 100K 135-104LAG-J01", "NTC 100K MGB18-104F39050L32",
#   "SliceEngineering 450", and "TDK NTCG104LH104JT1". See the
#   "Temperature sensors" section for other sensors. This parameter
#   must be provided.
sensor_pin: PA0
#   Analog input pin connected to the sensor. This parameter must be
#   provided.
#pullup_resistor: 4700
#   The resistance (in ohms) of the pullup attached to the thermistor.
#   This parameter is only valid when the sensor is a thermistor. The
#   default is 4700 ohms.
#smooth_time: 1.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed to reduce the impact of measurement noise. The default
#   is 1 seconds.
control: pid
#   Control algorithm (either pid, pid_v, watermark or mpc). This parameter must
#   be provided. pid_v should only be used on well calibrated heaters with
#   low to moderate noise.
#
#   If control: pid or pid_v
pid_kp: 30.185
pid_ki: 1.696
pid_kd: 134.321
#   The proportional (pid_Kp), integral (pid_Ki), and derivative
#   (pid_Kd) settings for the PID feedback control system. Kalico
#   evaluates the PID settings with the following general formula:
#     heater_pwm = (Kp*error + Ki*integral(error) - Kd*derivative(error)) / 255
#   Where "error" is "requested_temperature - measured_temperature"
#   and "heater_pwm" is the requested heating rate with 0.0 being full
#   off and 1.0 being full on. Consider using the PID_CALIBRATE
#   command to obtain these parameters. The pid_Kp, pid_Ki, and pid_Kd
#   parameters must be provided for PID heaters.
#
#   If control: watermark
#max_delta: 2.0
#   On 'watermark' controlled heaters this is the number of degrees in
#   Celsius above the target temperature before disabling the heater
#   as well as the number of degrees below the target before
#   re-enabling the heater. The default is 2 degrees Celsius.
#
#   If control: mpc
#   See MPC.md for details about these parameters.
#heater_power:
#cooling_fan:
#ambient_temp_sensor:
#filament_diameter: 1.75
#filament_density: 1.2
#filament_heat_capacity: 1.8
#
#pwm_cycle_time: 0.100
#   Time in seconds for each software PWM cycle of the heater. It is
#   not recommended to set this unless there is an electrical
#   requirement to switch the heater faster than 10 times a second.
#   The default is 0.100 seconds.
min_extrude_temp: 0
#   The minimum temperature (in Celsius) at which extruder move
#   commands may be issued. The default is 170 Celsius.
min_temp: 0
max_temp: 285
#   The maximum range of valid temperatures (in Celsius) that the
#   heater must remain within. This controls a safety feature
#   implemented in the micro-controller code - should the measured
#   temperature ever fall outside this range then the micro-controller
#   will go into a shutdown state. This check can help detect some
#   heater and sensor hardware failures. Set this range just wide
#   enough so that reasonable temperatures do not result in an error.
#   These parameters must be provided.
per_move_pressure_advance: False
#   If true, uses pressure advance constant from trapq when processing moves
#   This causes changes to pressure advance be taken into account immediately,
#   for all moves in the current queue, rather than ~250ms later once the queue gets flushed

[tmc2209 extruder]
uart_pin: PC11
#tx_pin:
#select_pins:
interpolate: False
run_current: 0.650
#hold_current:
#home_current:
#current_change_dwell_time:
sense_resistor: 0.110
stealthchop_threshold: 0
#stealthchop_threshold: 999999
#   See the "tmc2208" section for the definition of these parameters.
#coolstep_threshold:
#   The velocity (in mm/s) to set the TMC driver internal "CoolStep"
#   threshold to. If set, the coolstep feature will be enabled when
#   the stepper motor velocity is near or above this value. Important
#   - if coolstep_threshold is set and "sensorless homing" is used,
#   then one must ensure that the homing speed is above the coolstep
#   threshold! The default is to not enable the coolstep feature.
#uart_address:
#   The address of the TMC2209 chip for UART messages (an integer
#   between 0 and 3). This is typically used when multiple TMC2209
#   chips are connected to the same UART pin. The default is zero.
#driver_MULTISTEP_FILT: True
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_TBL: 2
#driver_TOFF: 3
#driver_HEND: 0
#driver_HSTRT: 5
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#driver_SGTHRS: 0
#   Set the given register during the configuration of the TMC2209
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag_pin:
#   The micro-controller pin attached to the DIAG line of the TMC2209
#   chip. The pin is normally prefaced with "^" to enable a pullup.
#   Setting this creates a "tmc2209_stepper_x:virtual_endstop" virtual
#   pin which may be used as the stepper's endstop_pin. Doing this
#   enables "sensorless homing". (Be sure to also set driver_SGTHRS to
#   an appropriate sensitivity value.) The default is to not enable
#   sensorless homing.

###################################################################################
# Bed Heater
###################################################################################

[heater_bed]
heater_pin: PC9
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC3
control: pid
#pid_version: 1
#pid_target: 80.00
#pid_tolerance: 0.0200
pid_kp: 74.499
pid_ki: 1.522
pid_kd: 911.682
min_temp: 0
max_temp: 130
#   See the "extruder" section for a description of the above parameters.

###################################################################################
# Probe
###################################################################################
[probe]
pin: ^!PC2
#   Probe detection pin. If the pin is on a different microcontroller
#   than the Z steppers then it enables "multi-mcu homing". This
#   parameter must be provided.
#deactivate_on_each_sample: True
#   This determines if Kalico should execute deactivation gcode
#   between each probe attempt when performing a multiple probe
#   sequence. The default is True.
x_offset: -39.0
#   The distance (in mm) between the probe and the nozzle along the
#   x-axis. The default is 0.
y_offset: 5.0
#   The distance (in mm) between the probe and the nozzle along the
#   y-axis. The default is 0.
#z_offset: 1.200
#   The distance (in mm) between the bed and the nozzle when the probe
#   triggers. This parameter must be provided.
speed: 5.0
#   Speed (in mm/s) of the Z axis when probing. The default is 5mm/s.
samples: 2
#   The number of times to probe each point. The probed z-values will
#   be averaged. The default is to probe 1 time.
sample_retract_dist: 4.0
#   The distance (in mm) to lift the toolhead between each sample (if
#   sampling more than once). The default is 2mm.
#lift_speed:
#   Speed (in mm/s) of the Z axis when lifting the probe between
#   samples. The default is to use the same value as the 'speed'
#   parameter.
samples_result: median
#   The calculation method when sampling more than once - either
#   "median" or "average". The default is average.
samples_tolerance: 0.003
#   The maximum Z distance (in mm) that a sample may differ from other
#   samples. If this tolerance is exceeded then either an error is
#   reported or the attempt is restarted (see
#   samples_tolerance_retries). The default is 0.100mm.
samples_tolerance_retries: 20
#   The number of times to retry if a sample is found that exceeds
#   samples_tolerance. On a retry, all current samples are discarded
#   and the probe attempt is restarted. If a valid set of samples are
#   not obtained in the given number of retries then an error is
#   reported. The default is zero which causes an error to be reported
#   on the first sample that exceeds samples_tolerance.
#activate_gcode:
#   A list of G-Code commands to execute prior to each probe attempt.
#   See docs/Command_Templates.md for G-Code format. This may be
#   useful if the probe needs to be activated in some way. Do not
#   issue any commands here that move the toolhead (eg, G1). The
#   default is to not run any special G-Code commands on activation.
#deactivate_gcode:
#   A list of G-Code commands to execute after each probe attempt
#   completes. See docs/Command_Templates.md for G-Code format. Do not
#   issue any commands here that move the toolhead. The default is to
#   not run any special G-Code commands on deactivation.
#drop_first_result: False
#   Set to `True` will probe one extra time and remove the first
#   sample from calculation. This can improve probe accuracy for
#   printers that have an outlier first sample.

[safe_z_home]
#home_xy_position: 117.5, 111.5 # nozzle/bed center
#home_xy_position: 156.5, 106.5 # probe at center
home_xy_position: 156.5, 106.5 # probe at center
#   A X, Y coordinate (e.g. 100, 100) where the Z homing should be
#   performed. This parameter must be provided.
speed: 50.0
#   Speed at which the toolhead is moved to the safe Z home
#   coordinate. The default is 50 mm/s
z_hop: 4.0
#   Distance (in mm) to lift the Z axis prior to homing. This is
#   applied to any homing command, even if it doesn't home the Z axis.
#   If the Z axis is already homed and the current Z position is less
#   than z_hop, then this will lift the head to a height of z_hop. If
#   the Z axis is not already homed the head is lifted by z_hop.
#   The default is to not implement Z hop.
z_hop_speed: 5.0
#   Speed (in mm/s) at which the Z axis is lifted prior to homing. The
#   default is 15 mm/s.
#move_to_previous: False
#   When set to True, the X and Y axes are reset to their previous
#   positions after Z axis homing. The default is False.
#home_y_before_x: False
#  # If True, the Y axis will home first. The default is False.

###################################################################################
# Bed Level Support
###################################################################################

[bed_mesh]
speed: 120
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
horizontal_move_z: 4
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
#mesh_radius:
#   Defines the radius of the mesh to probe for round beds. Note that
#   the radius is relative to the coordinate specified by the
#   mesh_origin option. This parameter must be provided for round beds
#   and omitted for rectangular beds.
#mesh_origin:
#   Defines the center X, Y coordinate of the mesh for round beds. This
#   coordinate is relative to the probe's location. It may be useful
#   to adjust the mesh_origin in an effort to maximize the size of the
#   mesh radius. Default is 0, 0. This parameter must be omitted for
#   rectangular beds.
mesh_min: 5, 5
#   Defines the minimum X, Y coordinate of the mesh for rectangular
#   beds. This coordinate is relative to the probe's location. This
#   will be the first point probed, nearest to the origin. This
#   parameter must be provided for rectangular beds.
mesh_max: 202, 202
#   Defines the maximum X, Y coordinate of the mesh for rectangular
#   beds. Adheres to the same principle as mesh_min, however this will
#   be the furthest point probed from the bed's origin. This parameter
#   must be provided for rectangular beds.
probe_count: 7, 7
#   For rectangular beds, this is a comma separate pair of integer
#   values X, Y defining the number of points to probe along each
#   axis. A single value is also valid, in which case that value will
#   be applied to both axes. Default is 3, 3.
#round_probe_count: 5
#   For round beds, this integer value defines the maximum number of
#   points to probe along each axis. This value must be an odd number.
#   Default is 5.
fade_start: 0.6
#   The gcode z position in which to start phasing out z-adjustment
#   when fade is enabled. Default is 1.0.
fade_end: 10.0
#   The gcode z position in which phasing out completes. When set to a
#   value below fade_start, fade is disabled. It should be noted that
#   fade may add unwanted scaling along the z-axis of a print. If a
#   user wishes to enable fade, a value of 10.0 is recommended.
#   Default is 0.0, which disables fade.
fade_target: 0
#   The z position in which fade should converge. When this value is
#   set to a non-zero value it must be within the range of z-values in
#   the mesh. Users that wish to converge to the z homing position
#   should set this to 0. Default is the average z value of the mesh.
#split_delta_z: .025
#   The amount of Z difference (in mm) along a move that will trigger
#   a split. Default is .025.
#move_check_distance: 5.0
#   The distance (in mm) along a move to check for split_delta_z.
#   This is also the minimum length that a move can be split. Default
#   is 5.0.
mesh_pps: 2, 2
#   A comma separated pair of integers X, Y defining the number of
#   points per segment to interpolate in the mesh along each axis. A
#   "segment" can be defined as the space between each probed point.
#   The user may enter a single value which will be applied to both
#   axes. Default is 2, 2.
algorithm: bicubic
#   The interpolation algorithm to use. May be either "lagrange" or
#   "bicubic". This option will not affect 3x3 grids, which are forced
#   to use lagrange sampling. Default is lagrange.
bicubic_tension: 0.2
#   When using the bicubic algorithm the tension parameter above may
#   be applied to change the amount of slope interpolated. Larger
#   numbers will increase the amount of slope, which results in more
#   curvature in the mesh. Default is .2.
zero_reference_position: 117.5, 117.5
#   An optional X,Y coordinate that specifies the location on the bed
#   where Z = 0.  When this option is specified the mesh will be offset
#   so that zero Z adjustment occurs at this location.  The default is
#   no zero reference.
#faulty_region_1_min:
#faulty_region_1_max:
#   Optional points that define a faulty region.  See docs/Bed_Mesh.md
#   for details on faulty regions.  Up to 99 faulty regions may be added.
#   By default no faulty regions are set.
#adaptive_margin:
#   An optional margin (in mm) to be added around the bed area used by
#   the defined print objects when generating an adaptive mesh.
#bed_mesh_default:
#   Optionally provide the name of a profile you would like loaded on init.
#   By default, no profile is loaded.
use_probe_xy_offsets: True
#   If True, apply the `[probe]` XY offsets to the probed positions. The
#   default is True.

[bed_screws]
screw1: 67.5, 197.5
#   The X, Y coordinate of the first bed leveling screw. This is a
#   position to command the nozzle to that is directly above the bed
#   screw (or as close as possible while still being above the bed).
#   This parameter must be provided.
screw1_name: rear left screw
#   An arbitrary name for the given screw. This name is displayed when
#   the helper script runs. The default is to use a name based upon
#   the screw XY location.
screw1_fine_adjust: 67.5, 28.5
#   An X, Y coordinate to command the nozzle to so that one can fine
#   tune the bed leveling screw. The default is to not perform fine
#   adjustments on the bed screw.
screw2: 237.5, 28.5
screw2_name: front right screw
screw3: 237.5, 197.5
screw3_name: rear right screw
screw4: 67.5, 28.5
screw4_name: front left screw
#...
#   Additional bed leveling screws. At least three screws must be
#   defined.
horizontal_move_z: 5
#   The height (in mm) that the head should be commanded to move to
#   when moving from one screw location to the next. The default is 5.
probe_height: 0
#   The height of the probe (in mm) after adjusting for the thermal
#   expansion of bed and nozzle. The default is zero.
speed: 50
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
probe_speed: 5
#   The speed (in mm/s) when moving from a horizontal_move_z position
#   to a probe_height position. The default is 5.

[screws_tilt_adjust]
screw1: 67.5, 197.5
#   The (X, Y) coordinate of the first bed leveling screw. This is a
#   position to command the nozzle to so that the probe is directly
#   above the bed screw (or as close as possible while still being
#   above the bed). This is the base screw used in calculations. This
#   parameter must be provided.
screw1_name: rear left screw
#   An arbitrary name for the given screw. This name is displayed when
#   the helper script runs. The default is to use a name based upon
#   the screw XY location.
screw2: 237.5, 28.5
screw2_name: front right screw
screw3: 237.5, 197.5
screw3_name: rear right screw
screw4: 67.5, 28.5
screw4_name: front left screw
#   Additional bed leveling screws. At least two screws must be
#   defined.
speed: 50
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
horizontal_move_z: 5
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
screw_thread: CW-M4
#   The type of screw used for bed leveling, M3, M4, or M5, and the
#   rotation direction of the knob that is used to level the bed.
#   Accepted values: CW-M3, CCW-M3, CW-M4, CCW-M4, CW-M5, CCW-M5, CW-M8, CCW-M8.
#   Default value is CW-M3 which most printers use. A clockwise
#   rotation of the knob decreases the gap between the nozzle and the
#   bed. Conversely, a counter-clockwise rotation increases the gap.
use_probe_xy_offsets: False
#   If True, apply the `[probe]` XY offsets to the probed positions. The
#   default is False.

###################################################################################
# G-Code Macros and Events
###################################################################################

[include macros.cfg]

#[delayed_gcode my_delayed_gcode]
#gcode:
#   A list of G-Code commands to execute when the delay duration has
#   elapsed. G-Code templates are supported. This parameter must be
#   provided.
#initial_duration: 0.0
#   The duration of the initial delay (in seconds). If set to a
#   non-zero value the delayed_gcode will execute the specified number
#   of seconds after the printer enters the "ready" state. This can be
#   useful for initialization procedures or a repeating delayed_gcode.
#   If set to 0 the delayed_gcode will not execute on startup.
#   Default is 0.

###################################################################################
# Optional G-Code Features
###################################################################################

#[virtual_sdcard]
#path:
#   The path of the local directory on the host machine to look for
#   g-code files. This is a read-only directory (sdcard file writes
#   are not supported). One may point this to OctoPrint's upload
#   directory (generally ~/.octoprint/uploads/ ). This parameter must
#   be provided.
#on_error_gcode:
#   A list of G-Code commands to execute when an error is reported.
#   See docs/Command_Templates.md for G-Code format. The default is to
#   run TURN_OFF_HEATERS.
#with_subdirs: False
#   Enable scanning of subdirectories for the menu and for the
#   M20 and M23 commands. The default is False.

# This module is enabled by default in Kalico!
# [force_move]
# enable_force_move: True
#   Set to `True` to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is `True`.

[firmware_retraction]
#retract_length: 0.0
#   The length of filament (in mm) to retract when a G10 command is
#   executed. When a G11 command is executed, the unretract_length
#   is the sum of the retract_length and the unretract_extra_length
#   (see below). The minimum value and default are 0 mm, which
#   disables firmware retraction.
#retract_speed: 20.0
#   The speed of filament retraction moves (in mm/s).
#   This value is typically set relatively high (>40 mm/s),
#   except for soft and/oozy filaments like TPU and PETG
#   (20 to 30 mm/s). The minimum value is 1 mm/s, the default value
#   is 20 mm/s.
#unretract_extra_length: 0.0
#   The *additional* length (in mm) to add or the length to subtract
#   from the filament move when unretracting compared to the retract
#   move length. This allows priming the nozzle (positive extra length)
#   or delaying extrusion after unretracting (negative length). The
#   latter may help reduce blobbing. The minimum value is -1 mm
#   (2.41 mm3 volume for 1.75 mm filament), the default value is 0 mm.
#unretract_speed: 10.0
#   The speed of filament unretraction moves (in mm/s).
#   This parameter is not particularly critical, although often lower
#   than retract_speed. The minimum value is 1 mm/s, the default value
#   is 10 mm/s.
#z_hop_height: 0.0
#   The vertical height by which the nozzle is lifted from the print to
#   prevent collisions with the print during travel moves when retracted.
#   The minimum value is 0 mm, the default value is 0 mm, which disables
#   zhop moves. The value will be reduced if the zhop move reaches
#   maximum z.
#clear_zhop_on_z_moves: False
#   If True, when a change in Z is sent while toolhead is retracted,
#   z_hop is cancelled until next retraction. Otherwise,
#   `z_hop_height` is applied as an offset to all movements.

[gcode_arcs]
resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.

# This module is enabled by default in Kalico!
#[exclude_object]
#enable_exclude_object: True
#   Set to `True` to enable `EXCLUDE_OBJECT_*` extended G-Code commands.
#   The default is `True`.

###################################################################################
# Display Support
###################################################################################

######################################################################
# 128x64 Full Graphic Creality CR10 / ENDER 3 stockdisplay
######################################################################

# This section is used for a Creality "12864" display with a single
# ribbon cable between the display's EXP3 plug and the
# micro-controller board's EXP1 connector.

[display]
lcd_type: st7920
menu_timeout: 600
cs_pin: EXP1_7
sclk_pin: EXP1_6
sid_pin: EXP1_8
encoder_pins: ^EXP1_5, ^EXP1_3
click_pin: ^!EXP1_2

[output_pin beeper]
pin: EXP1_1

# Additional pin declarations
[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5, EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PB6, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PB7, EXP1_10=<5V>

# See the sample-lcd.cfg file for definitions of common LCD displays.



###################################################################################
# Additional Sensors
###################################################################################

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
sensor_mcu: mcu
min_temp: 0
max_temp: 100

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe]
#*# z_offset = 1.130
